boxplot(nndistG(seals))
hist(nndistG(seals)$dists)
hist(nndistG(seals)$dists,breaks=30,col="green")
hist(nndistG(seals)$dists,breaks=30,col="lightgreen")
hist(nndistG(seals)$dists,breaks=20,col="lightgreen")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
library(readr)
seal_sizes <- read_csv("~/Dropbox/NASA SmallSat/seal_sizes.csv")
View(seal_sizes)
hist(seal_sizes)
hist(seal_sizes$x)
hist(seal_sizes$size)
hist(seal_sizes$size,col="lightblue")
mean(seal_sizes)
mean(seal_sizes$size)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,500,2))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-20,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.1),sqrt(seals.khat$lower/pi)-seq(0,2,0.1),lty=2)
lines(seq(0,2,0.1),sqrt(seals.khat$upper/pi)-seq(0,2,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,2,0.01))
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=100,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1)))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))),typ="l")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
hist(seal_sizes$size,col="lightblue")
hist(seal_sizes$size,col="lightblue",breaks-20)
hist(seal_sizes$size,col="lightblue",breaks=20)
hist(seal_sizes$size,col="lightblue",breaks=15)
hist(seal_sizes$size,col="lightblue",breaks=12)
hist(seal_sizes$size,col="lightblue",breaks=11)
hist(seal_sizes$size,col="lightblue",breaks=10)
exp(0.1^2)
0.1^2
32120*0.595
45520*0.595
48520*0.595
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
install.packages("bookdown")
bookdown::render_book("index.Rmd")
install.packages("ggplot2")
bookdown::render_book("index.Rmd")
install.packages("ggExtra")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
?rnorm
temp<-seq(10,20,0.1)
intercept<-1
slope<-2
mean_vals<-intercept+slope*temp
data<-c()
for (i in 1:length(temp))
{
data<-c(data,rnorm(mean_vals,sd=1)
}
temp<-seq(10,20,0.1)
intercept<-1
slope<-2
mean_vals<-intercept+slope*temp
data<-c()
for (i in 1:length(temp))
{
data<-c(data,rnorm(mean_vals,sd=1))
}
plot(temp,data)
length(mean_vals)
temp<-seq(10,20,0.1)
intercept<-1
slope<-2
mean_vals<-intercept+slope*temp
data<-c()
for (i in 1:length(temp))
{
data<-c(data,rnorm(mean_vals[i],sd=1))
}
plot(temp,data)
length(temp)
length(data)
temp<-seq(10,20,0.1)
intercept<-1
slope<-2
mean_vals<-intercept+slope*temp
data<-c()
for (i in 1:length(temp))
{
data<-c(data,rnorm(1,mean_vals[i],sd=1))
}
plot(temp,data)
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
i=1
sim_data_means<-intercept[i]+slope[i]*temp
sim_data~rnorm(1,sim_data_means,sd=1)
sim_data<-rnorm(1,sim_data_means,sd=1)
sim_data
sim_data_means
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
sim_data
sum((sim_data-data)^2)
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<20) {keep<-c(keep,i)}
}
keep
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<50) {keep<-c(keep,i)}
}
keep
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<100) {keep<-c(keep,i)}
}
keep
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
}
keep
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
}
keep
intercept~rnorm(1000,0,20)
slope~rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
}
keep
i=1
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
keep
plot(temp,data)
points(temp,sim_data,col="red")
sim_data-data
(sim_data-data)^2
sum((sim_data-data)^2)
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
keep
i=2
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
warnings()
sim_data_means
intercept[2]
head(intercept)
intercept<-rnorm(1000,0,20)
slope<-rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
}
keep
intercept<-rnorm(1000,0,20)
slope<-rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<300) {keep<-c(keep,i)}
}
keep
intercept<-rnorm(1000,0,20)
slope<-rnorm(1000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<500) {keep<-c(keep,i)}
}
keep
hist(slope[keep])
intercept<-rnorm(10000,0,20)
slope<-rnorm(10000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<500) {keep<-c(keep,i)}
}
hist(slope[keep])
hist(intercept[keep])
intercept<-rnorm(10000,0,20)
slope<-rnorm(10000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<1000) {keep<-c(keep,i)}
}
hist(intercept[keep])
hist(intercept[keep],breaks=30)
intercept<-rnorm(10000,0,20)
slope<-rnorm(10000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<100) {keep<-c(keep,i)}
}
hist(intercept[keep],breaks=30)
intercept<-rnorm(10000,0,20)
slope<-rnorm(10000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<500) {keep<-c(keep,i)}
}
hist(intercept[keep])
plot(intercept[keep],slope[keep])
intercept<-rnorm(10000,0,5)
slope<-rnorm(10000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<500) {keep<-c(keep,i)}
}
plot(intercept[keep],slope[keep])
intercept<-rnorm(100000,0,5)
slope<-rnorm(100000,0,3)
keep<-c()
for (i in 1:length(intercept))
{
sim_data_means<-intercept[i]+slope[i]*temp
sim_data<-c()
for (j in 1:length(data))
{
sim_data<-c(sim_data,rnorm(1,sim_data_means[j],sd=1))
}
if (sum((sim_data-data)^2)<400) {keep<-c(keep,i)}
}
plot(intercept[keep],slope[keep])
hist(intercept[keep])
hist(slope[keep])
plot(intercept,slope)
points(intercept[keep],slope[keep],col="red")
95833+92333+95333
?dbinom
dbinom(seq(0,10),size=10,prob=0.5)
plot(dbinom(seq(0,10),size=10,prob=0.5))
sum(dbinom(seq(0,10),size=10,prob=0.5))
N <- 1000
#Storage vectors
Theta1.prior <- c()
Theta2.prior <- c()
#Get uniform prior samples for Theta1 and Theta2
for(i in N){
Theta1.prior <- c(Theta1.prior, runif(i, 0, 1))
Theta2.prior <- c(Theta2.prior, runif(i, 0, 1))
}
length(Theta1.prior)
hist(Theta1.prior)
df <- data.frame(Theta1.prior, Theta2.prior)
###########################################################
#Calculate likelihoods using prior values
###########################################################
Likelihoods <- c()
#Calculate the likelihood of the data for each sample from prior distributions
for(i in 1:length(df$Theta1.prior)){
L.i <- L(df$Theta1.prior[i],df$Theta2.prior[i])
Likelihoods <- c(Likelihoods, L.i)
}
#add Likelihoods as column to dataframe
df$Likelihoods <- Likelihoods
###########################################################
#Normalize the likelihoods
###########################################################
#find sum of likelihoods so we can normalize them
Likelihood.sum <- sum(df$Likelihoods)
#Storage vector
Normalized.L <- c()
#Normalize the Likelihoods
for(i in 1:length(df$Likelihoods)){
n.ith <- df$Likelihoods[i]/Likelihood.sum
Normalized.L <- c(Normalized.L, n.ith)
}
df$Normalized.L <- Normalized.L
#########################################################################################
#Generate Posteriors:
# Resample from the priors using the normalized probabilities as weights (sample function)
#########################################################################################
Theta1.posterior <- c()
Theta2.posterior <- c()
#Sample from the prior using Normalized probabilities as weights
Theta1.posterior<- c(sample(Theta1.prior,
replace = TRUE,
prob = Normalized.L))
Theta2.posterior<- c(sample(Theta2.prior,
replace = TRUE,
prob = Normalized.L))
df.posteriors <- data.frame(Theta1.posterior, Theta2.posterior)
length(Normalized.L)
df
df$Likelihoods <- Likelihoods
head(df)
library(gtools)
library(ggplot2)
library(ggExtra)
#purge the env objects
rm(list= ls())
install.packages("gtools")
library(gtools)
library(ggplot2)
library(ggExtra)
#purge the env objects
rm(list= ls())
L <- function(theta_1, theta_2){
prod(
sum(
(dbinom(2,5,theta_1)*(dbinom(5,5,theta_2))),
(dbinom(3,5,theta_1)*(dbinom(4,5,theta_2))),
(dbinom(4,5,theta_1)*(dbinom(3,5,theta_2))),
(dbinom(5,5,theta_1)*(dbinom(2,5,theta_2)))),
sum(
(dbinom(1,6,theta_1)*(dbinom(4,4,theta_2))),
(dbinom(2,6,theta_1)*(dbinom(3,4,theta_2))),
(dbinom(3,6,theta_1)*(dbinom(2,4,theta_2))),
(dbinom(4,6,theta_1)*(dbinom(1,4,theta_2))),
(dbinom(5,6,theta_1)*(dbinom(0,4,theta_2)))),
sum(
(dbinom(0,4,theta_1)*(dbinom(6,6,theta_2))),
(dbinom(1,4,theta_1)*(dbinom(5,6,theta_2))),
(dbinom(2,4,theta_1)*(dbinom(4,6,theta_2))),
(dbinom(3,4,theta_1)*(dbinom(3,6,theta_2))),
(dbinom(4,4,theta_1)*(dbinom(2,6,theta_2)))))}
N <- 1000
#Storage vectors
Theta1.prior <- c()
Theta2.prior <- c()
#Get uniform prior samples for Theta1 and Theta2
for(i in N){
Theta1.prior <- c(Theta1.prior, runif(i, 0, 1))
Theta2.prior <- c(Theta2.prior, runif(i, 0, 1))
}
#Generate a proper dataframe
df <- data.frame(Theta1.prior, Theta2.prior)
Likelihoods <- c()
#Calculate the likelihood of the data for each sample from prior distributions
for(i in 1:length(df$Theta1.prior)){
L.i <- L(df$Theta1.prior[i],df$Theta2.prior[i])
Likelihoods <- c(Likelihoods, L.i)
}
df$Likelihoods <- Likelihoods
head(df)
Likelihood.sum <- sum(df$Likelihoods)
#Storage vector
Normalized.L <- c()
#Normalize the Likelihoods
for(i in 1:length(df$Likelihoods)){
n.ith <- df$Likelihoods[i]/Likelihood.sum
Normalized.L <- c(Normalized.L, n.ith)
}
df$Normalized.L <- Normalized.L
head(df)
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
