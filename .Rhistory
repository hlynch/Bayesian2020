}
}
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
for (i in 1:1000) {
Atlantic_sums <- c(Atlantic_sums,sum(Atlantic_counts[,i]))
}
dim(all_counts)
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
dim(all_counts)
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts_log <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-log(gentoo_counts_fixed$Abundance[i])
sigma<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
all_counts_log <- rbind(all_counts_log, count.w.error)
}
}
#### Summing each column of generated counts
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts_log[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
dim(Atlantic)
Atlantic <- subset(gentoo_counts_fixed, Sector == "Atlantic")
dim(Atlantic)
dim(gentoo_counts_fixed)
sec_48.1_indices <- which(gentoo_counts_fixed$CCAMLR == "48.1")
sec_48.1_sums <- c()
sec_48.1_counts<-all_counts[sec_48.1_indices,]
for (i in 1:1000) {
sec_48.1_sums <- c(sec_48.1_sums,sum(sec_48.1_counts[,i]))
}
hist(sec_48.1_sums)
mean(sec_48.1_sums)
quantile(sec_48.1_sums,c(0.025,0.975))
all_counts <- vector()
for (i in 1:nrow(sec_48.1)) {
if(!is.na(sec_48.1$Abundance[i])&(sec_48.1$Abundance[i]>0))
{
mu<-sec_48.1$Abundance[i]
sig<-precision_scales[sec_48.1$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts_log <- vector()
for (i in 1:nrow(sec_48.1)) {
if(!is.na(sec_48.1$Abundance[i])&(sec_48.1$Abundance[i]>0))
{
mu<-log(sec_48.1$Abundance[i])
sigma<-precision_scales[sec_48.1$Penalty[i]]
count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
all_counts_log <- rbind(all_counts_log, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts_log[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
0.042*3
0.021*3
0.042+0.021+0.2+1+0.5
1.763*3
0.342*3
0.121*3
0.342+0.121+0.5+0.2+1.0+0.50
0.342+0.121+0.3+0.2+1.0+0.50
0.342+0.121+0.2+0.2+1.0+0.50
2.663+2.463+2.363
0.042+0.021+0.2+1+1
2.263*3
0.3+0.1+0.5
0.342+0.121+0.5+0.2+1+1
0.342+0.121+0.3+0.2+1+1
0.342+0.121+0.2+0.2+1+1
3.163+2.963+2.863
1/6
1.25/6.5
1/6.5
12/5
0.342*6.5
0.3*12
0.2*12
12-2.4
4.28*3
4.28*3
18+12+12+12
6.5+6.5+36
0.5+0.25+2.4+12+12
2.22+1+6+2.4+24
4.28+5.25+6
2.22+1+3.6+2.4+24
4.28+5.25+8.4
2.22+1+2.4+2.4+24
4.28+5.25+9.6
1.5+0.75+7.2+36+36
6.66+3+12+7.2+36+36
12.84+15.75+24
27.15+35.62
27.15+35.62+15.53
7220*0.14
5694*0.14
55000*0.25
28000*0.16
40000/26
1538*0.65
load("/Users/hjlynch/Downloads/wesegrid.RData")
View(wesedf)
12*11*2895
4195*10*12
12*21*2895
729540-503400
2000000/15
1/26
1/4
1/6
0.5/12
(2/3)*160
sqrt(30^2+11^2)
library(readr)
points <- read_csv("~/Dropbox/NASA SmallSat/points.csv")
View(points)
install.packages("spatstat")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
library("splancs", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(readr)
points <- read_csv("~/Dropbox/NASA SmallSat/points.csv")
View(points)
seals<-as.points(points)
seals
poly<-bboxx(seals)
poly
khat(seals,poly,seq(0,500,2))
plot(seq(0,500,2),khat(seals,poly,seq(0,500,2)))
seals.khat<-Kenv.csr(length(seals$x),poly,nsim=30,seq(0,500,2))
seals$x
seals
seals.khat<-Kenv.csr(length(seals$arx),poly,nsim=30,seq(0,500,2))
dim(seals)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,500,2))
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l")
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="")
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="",ylim=c(-200,200))
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
boxplot(nndistG(seals$dists))
boxplot(nndistG(as.points(seals)$dists))
boxplot(nndistG(seals))
hist(nndistG(seals)$dists)
hist(nndistG(seals)$dists,breaks=30,col="green")
hist(nndistG(seals)$dists,breaks=30,col="lightgreen")
hist(nndistG(seals)$dists,breaks=20,col="lightgreen")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
library(readr)
seal_sizes <- read_csv("~/Dropbox/NASA SmallSat/seal_sizes.csv")
View(seal_sizes)
hist(seal_sizes)
hist(seal_sizes$x)
hist(seal_sizes$size)
hist(seal_sizes$size,col="lightblue")
mean(seal_sizes)
mean(seal_sizes$size)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,500,2))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-20,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.1),sqrt(seals.khat$lower/pi)-seq(0,2,0.1),lty=2)
lines(seq(0,2,0.1),sqrt(seals.khat$upper/pi)-seq(0,2,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,2,0.01))
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=100,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1)))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))),typ="l")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
hist(seal_sizes$size,col="lightblue")
hist(seal_sizes$size,col="lightblue",breaks-20)
hist(seal_sizes$size,col="lightblue",breaks=20)
hist(seal_sizes$size,col="lightblue",breaks=15)
hist(seal_sizes$size,col="lightblue",breaks=12)
hist(seal_sizes$size,col="lightblue",breaks=11)
hist(seal_sizes$size,col="lightblue",breaks=10)
exp(0.1^2)
0.1^2
32120*0.595
45520*0.595
48520*0.595
install.packages("httr")
library("httr", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
r <- GET(search_url)
library(XML)
base_url = "https://api.edamam.com/api/food-database/v2/"
db="ingr"
query="red%20apple"
app_id="1b8a97e6"
app_key="b77ea7a0922dacaeafc430dd290a76d7"
esearch=sprintf("parser?%s=%s&app_id=%s&app_key=%s",db,query,app_id,app_key)
search_url=paste(base_url,esearch,sep='')
search_url
r <- GET(search_url)
r
dim(r)
length(r)
names(r)
r$content
r$times
r$handle
r$headers
headers(r)
str(content(r))
http_type(r)
install.packages("jsonlite")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
jsonlite::fromJSON(content(r, "text"), simplifyVector = FALSE)
?jsonlite
?content
?fromJSON
jsonIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
RjsonIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
RJSONIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
?fromJSON
r
RJSONIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
RJSONIO::fromJSON(r, simplifyVector = FALSE)
library(XML)
base_url = "https://api.edamam.com/api/food-database/v2/"
db="ingr"
query="red%20apple"
app_id="1b8a97e6"
app_key="b77ea7a0922dacaeafc430dd290a76d7"
esearch=sprintf("parser?%s=%s&app_id=%s&app_key=%s",db,query,app_id,app_key)
search_url=paste(base_url,esearch,sep='')
result <- GET(search_url)
library(XML)
library(httr)
base_url = "https://api.edamam.com/api/food-database/v2/"
db="ingr"
query="red%20apple"
app_id="1b8a97e6"
app_key="b77ea7a0922dacaeafc430dd290a76d7"
esearch=sprintf("parser?%s=%s&app_id=%s&app_key=%s",db,query,app_id,app_key)
search_url=paste(base_url,esearch,sep='')
result <- GET(search_url)
RJSONIO::fromJSON(r, simplifyVector = FALSE)
RJSONIO::fromJSON(content(r), simplifyVector = FALSE)
RJSONIO::fromJSON(content(result), simplifyVector = FALSE)
RJSONIO::fromJSON(result, simplifyVector = FALSE)
RJSONIO::fromJSON(result)
?stream_in
result2<-stream_in(search_url)
result2<-JSONlite::stream_in(search_url)
install.packages("jsonlite")
install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
90000*10
90000*10/(60+60)
7500/10
install.packages("circular")
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
G_2chicks <- matrix(c(0.00,0.00,2*0.05,2*0.33,2*0.46,2*0.94,2*0.94,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.75,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.80,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
lambda = 10
x <-rpois(1, lambda)
x_series <- round(cumprod(c(x, rep(1.2, 18))), digits = 0) # increase migrants every time step (1:18) conditional on last migrant number
x_series
MS <- c()
for (i in x_series){
M <- matrix(c(0,i,0,0,0,0,0), ncol = 1) # migrant vector
MS = cbind(MS, M)
}
MS
years <- 18
G0 <-matrix(c(0,0,14,0,0,0,0), ncol = 1) # Initial colonizers
G.projected <- matrix(0, nrow = nrow(G_2chicks), ncol = years+1) # Creates empty matrix to project time series across
G.projected[, 1] <- G0 # Sets virst column (t=1) to initial colonizers G0
G.projected
# Time series projection loop with added migration (MS matrix)
for (j in 1:ncol(MS)) {
for (i in 1:years){
G.projected[, i + 1] <- round(G_2chicks %*% (G.projected[,i])+MS[,j], digits = 0)
}
}
G.projected  # If you look at this output, for some reason column 2 has a very large number of individuals in row 2 (age class 2) and I cant understand why.
# It looks like the loop is adding the last column of the MS matrix first, then running through each the matrix columns
output <- colSums(G.projected[3:7,], na.rm=TRUE)
plot(output)
x
lambda = 10
x <-rpois(1, lambda)
x_series <- round(cumprod(c(x, rep(1.2, 18))), digits = 0) # increase migrants every time step (1:18) conditional on last migrant number
x_series
MS <- c()
for (i in x_series){
M <- matrix(c(0,i,0,0,0,0,0), ncol = 1) # migrant vector
MS = cbind(MS, M)
}
MS
x_series
x <-rpois(1, lambda)
x
c(x, rep(1.2, 18))
cumprod(c(x, rep(1.2, 18))
)
round(cumprod(c(x, rep(1.2, 18))), digits = 0)
alpha=10
intercept=10
beta=2
slope=2
rpois(18,lambda=intercept+slope*seq(1,18))
rpois(18,lambda=intercept+slope*seq(1,18))
rpois(18,lambda=intercept+slope*seq(1,18))
rpois(18,lambda=intercept+slope*seq(1,18))
rpois(18,lambda=intercept+slope*seq(1,18))
MS
years <- 18
G0 <-matrix(c(0,0,14,0,0,0,0), ncol = 1) # Initial colonizers
G.projected <- matrix(0, nrow = nrow(G_2chicks), ncol = years+1) # Creates empty matrix to project time series across
G.projected[, 1] <- G0 # Sets virst column (t=1) to initial colonizers G0
G.projected
# Time series projection loop with added migration (MS matrix)
for (j in 1:ncol(MS)) {
for (i in 1:years){
G.projected[, i + 1] <- round(G_2chicks %*% (G.projected[,i])+MS[,j], digits = 0)
}
}
G.projected  # If you look at this output, for some reason column 2 has a very large number of individuals in row 2 (age class 2) and I cant understand why.
i=1
G_2chicks %*% (G.projected[,i])
MS
G_2chicks
G0 <-matrix(c(0,0,14,0,0,0,0), ncol = 1) # Initial colonizers
G.projected <- matrix(0, nrow = nrow(G_2chicks), ncol = years+1) # Creates empty matrix to project time series across
G.projected[, 1] <- G0 # Sets virst column (t=1) to initial colonizers G0
G.projected
i=1
(G_2chicks %*% (G.projected[,i]))
MS
round((G_2chicks %*% (G.projected[,i]))+MS[,i], digits = 0)
library("mapppdr", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
penmap(ADPE)
penmap("CHPE")
penmap("CHPE")
data("penguin_obs")
head(penguin_obs)
head(penguin_obs)
penmap("CHPE")
penmap("CHPE")
184*190
library(readr)
Bat <- read_csv("~/Desktop/Bat.csv")
View(Bat)
plot(Bat)
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
setwd("~/Dropbox/BayesianFiles/Week 1 Introduction/Lab")
jags.directory="/usr/local/bin"
library(R2jags)
library(abind)
library(boot)
sim.data<-rnorm(1000,mean=3.3,sd=2)
Dat <- list(
y=sim.data
)
InitStage <- function() {list(mu=1,sigma=1)}
ParsStage <- c("mu","sigma")
ni <- 1100  # number of draws from the posterior
nt <- 1    #thinning rate
nb <- 100  # number to discard for burn-in
nc <- 2  # number of chains
m = jags(inits=InitStage,
n.chains=nc,
model.file="Week1_TestModel.jags",
working.directory=getwd(),
data=Dat,
parameters.to.save=ParsStage,
n.thin=nt,
n.iter=ni,
n.burnin=nb,
DIC=T)
m
ni <- 1100  # number of draws from the posterior
nt <- 1    #thinning rate
nb <- 100  # number to discard for burn-in
nc <- 3  # number of chains
m = jags(inits=InitStage,
n.chains=nc,
model.file="Week1_TestModel.jags",
working.directory=getwd(),
data=Dat,
parameters.to.save=ParsStage,
n.thin=nt,
n.iter=ni,
n.burnin=nb,
DIC=T)
m
dic.object.name = dic.samples(m, 1000, type = "pD")
dic.object.name = dic.samples(m, niter=1000, type = "pD")
summary(m$pD, mean)
summary(m$pD)
DIC(m)
2.028^2
(2.028^2)/2
DIC(m)
?DIC
dic.samples(m$model,niter=1000)
dic.samples(m$model,n.iter=1000)
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
