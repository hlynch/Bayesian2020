?content
?fromJSON
jsonIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
library("RJSONIO", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
RjsonIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
RJSONIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
?fromJSON
r
RJSONIO::fromJSON(content(r, "text"), simplifyVector = FALSE)
RJSONIO::fromJSON(r, simplifyVector = FALSE)
library(XML)
base_url = "https://api.edamam.com/api/food-database/v2/"
db="ingr"
query="red%20apple"
app_id="1b8a97e6"
app_key="b77ea7a0922dacaeafc430dd290a76d7"
esearch=sprintf("parser?%s=%s&app_id=%s&app_key=%s",db,query,app_id,app_key)
search_url=paste(base_url,esearch,sep='')
result <- GET(search_url)
library(XML)
library(httr)
base_url = "https://api.edamam.com/api/food-database/v2/"
db="ingr"
query="red%20apple"
app_id="1b8a97e6"
app_key="b77ea7a0922dacaeafc430dd290a76d7"
esearch=sprintf("parser?%s=%s&app_id=%s&app_key=%s",db,query,app_id,app_key)
search_url=paste(base_url,esearch,sep='')
result <- GET(search_url)
RJSONIO::fromJSON(r, simplifyVector = FALSE)
RJSONIO::fromJSON(content(r), simplifyVector = FALSE)
RJSONIO::fromJSON(content(result), simplifyVector = FALSE)
RJSONIO::fromJSON(result, simplifyVector = FALSE)
RJSONIO::fromJSON(result)
?stream_in
result2<-stream_in(search_url)
result2<-JSONlite::stream_in(search_url)
install.packages("jsonlite")
install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
setwd("~/Desktop")
install.packages("mapppdr_0.1.1.2.tar.gz", repos = NULL, type="source")
penmap("ADPE")
library(mapppdr)
penmap("ADPE")
vignette(mapppr)
vignette(mapppdr)
vignette("mapppdr")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
library(tidyverse)
install.packages("tidyverse")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
library(tidyverse)
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
hist(chinstrap_counts$year)
hist(chinstrap_counts$year,breaks=30)
hist(chinstrap_counts$year,breaks=seq(1900,220,10))
hist(chinstrap_counts$year,breaks=seq(1900,2200,10))
hist(chinstrap_counts$year,breaks=seq(1900,2020,10))
hist(chinstrap_counts$year,breaks=seq(1900,2020,5))
table(chinstrap_counts$season)
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") & season == "1978") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") & (season == "1978") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1978") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1979") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1980") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1981") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1982") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1983") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season == "1984") %>%
left_join(sites, by = "site_id") %>%
dplyr::filter(ccamlr_id == "48.2")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id")
chinstrap_counts
hist(chinstrap_counts$season)
hist(chinstrap_counts$season,seq(1900,2020,5))
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1976") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1977") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1978") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1979") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1980") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1981") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1982") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1983") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1984") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1985") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1986") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1987") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1988") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE" & season== "1989") %>%
left_join(sites, by = "site_id")
chinstrap_counts
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id == "CHPE") %>%
left_join(sites, by = "site_id")
hist(chinstrap_counts$season,seq(1970,2020,1))
hist(chinstrap_counts$season[chinstrap_counts$season>1969],seq(1970,2020,1))
G <- matrix(c(0.00,0.00,0.05,0.33,0.46,0.94,0.94,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.75,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.80,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
# initial values
G0 <-matrix(c(0,0,3,0,0,0,0), ncol = 1) # Initial colonizers
M <- matrix(c(0,0,5,10,0,0,0), ncol = 1) # migrant vector
G1 <- round(G %*% G0, digits = 00)
G2 <- round(G %*% G1, digits = 00)
years <- 20
G.projected <- matrix(0, nrow = nrow(G), ncol = years+1)
G.projected[, 1] <- G0
# Growth Model
for (i in 1:years) {
G.projected[, i + 1] <- round(G %*% G.projected[,i], digits = 0)
}
G.projected
sum(G.projected[7,])
G_2chicks <- matrix(c(0.00,0.00,2*0.05,2*0.33,2*0.46,2*0.94,2*0.94,
0.27,0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.59,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.75,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.80,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.89,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.89,0.89), nrow = 7, byrow=TRUE)
# Growth Model that Incorporates M immigration vector
for (i in 1:years) {
G.projected[, i + 1] <- round(G_2chicks %*% G.projected[,i]+M, digits = 0)
}
G.projected
t(G.projected)
sum(G.projected[,21])-447-112
sum(G.projected[,3:7])
par(mfrow=c(1,2))
matplot(0:years, t(G.projected), type = "l", lty = 1:7, col = 1:7, ylab = "n(t)", xlab = "Time (t)", xlim=)
legend("topleft", legend = c("chick", "Juvenile", "A1","A2","A3","A4","A5"),lty = 1:7, col = 1:7, bty = "n")
matplot(0:years, log(t(G.projected)), type = "l", lty = 1:7, col = 1:7, ylab = "Log n(t)", xlab = "Time (t)", xlim=)
legend("topleft", legend = c("chick", "Juvenile", "A1","A2","A3","A4","A5"),lty = 1:7, col = 1:7, bty = "n")
breeders <- colSums(G.projected[3:7,], na.rm=TRUE)
breeders <- cbind(c(0:20),breeders)
colnames(breeders) <-c("year","count")
breeders <- as.data.frame(breeders)
library(dplyr)
growth_rate <- function(x)(log(x/lag(x))) # growth rate function
breeders$growth_rate <- growth_rate(breeders$count)
avg_r <- mean(breeders$growth_rate, na.rm=TRUE)
growth_rate <- function(x)(mean(log(x/lag(x)), na.rm=TRUE)) # growth rate function
r <- growth_rate(breeders$count)
ORNE <- read.csv("ORNE.csv")
ORNE$growth_rate <- growth_rate(ORNE$count)
avg_r_ORNE <- mean(ORNE$growth_rate, na.rm=TRUE)
library(readr)
ORNE <- read_csv("~/Desktop/ORNE.csv")
View(ORNE)
ORNE$growth_rate <- growth_rate(ORNE$count)
avg_r_ORNE <- mean(ORNE$growth_rate, na.rm=TRUE)
for (i in 1:years) {
G.projected[, i + 1] <- round(G_2chicks %*% G.projected[,i]+M, digits = 0)
}
Age_structured_model <- function(matrix, projection, theta_star){
M <- matrix(c(0,0,theta_star,0,0,0,0), ncol = 1) # parameter of interest is number of migrants
for (i in 1:years) {
G.projected[, i + 1] <- round(matrix %*% projection[,i]+M, digits = 0)
}
output <- colSums(G.projected[3:7,], na.rm=TRUE)
output <- cbind(c(0:20),output)
colnames(output) <-c("year","count")
output <- as.data.frame(output)
growth_rate <- function(x)(mean(log(x/lag(x)), na.rm=TRUE))
rate <-growth_rate(output$count)
return(rate)
}
N <- 100000 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,45) # Sample from prior distributions
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + j #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(res[,1])
test <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,45) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + j #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(res[,1])
hist(test)
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,45) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + j #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(res[,1])
par(mfrow=c(1,1))
hist(test)
hist(res[,1],add=T,col="red")
hist(test,freq=T)
hist(test,freq=F)
hist(res[,1],freq=F,add=T,col="red")
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,100) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + j #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
i
j
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,100) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
N <- 10 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,100) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(test)
hist(test,freq=F)
hist(res[,1],freq=F,add=T,col="red")
N <- 10 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
###############################
######## ABC Algorithm ########
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,200) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(test,freq=F)
hist(res[,1],freq=F,add=T,col="red")
N <- 10 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
###############################
######## ABC Algorithm ########
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,1000) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
N <- 10 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
###############################
######## ABC Algorithm ########
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,1000) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
N <- 10 # number of accepted particles
epsilon <- 0.071 # epsilon value <- Heather this value is my cut off and it seems to be the lowest I can go for anything to be accepted. If you play around with the value you will see the funkiness
n_par <- 1 #how many parameters will be estimated
res <- matrix(ncol = n_par +1, nrow = N) #Empty matrix to store results
test <- c()
###############################
######## ABC Algorithm ########
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,1000) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
i <- 1 # Initiate counter of accepted particles
j <- 1 # Initiate counter of proposed particles
while(i <= N){ # While the number of accepted particles is less than N
theta_star <- runif(1,0,100) # Sample from prior distributions
test<-c(test,theta_star)
D_star <- Age_structured_model(G_2chicks, G.projected, theta_star) # simulate dataset from model
distance <- avg_r_ORNE - D_star # calculate distance
if(distance <= epsilon){ # If the distance is less than or equal to the tolerance
res[i,] <- c(theta_star, distance) # store results
i <- i + 1 #update counter
}
j <- j + 1 #update counter
acc_rate <- i/j # calculate the acceptance rate
cat("current acceptance rate = ", round(acc_rate, 2), "\n") # prints acceptance as it goes which is fun!.....
}
hist(test,freq=F)
hist(res[,1],freq=F,add=T,col="red")
chinstrap_counts <- penguin_obs %>%
left_join(sites, by = "site_id")
hist(chinstrap_counts$season[chinstrap_counts$season>1969],breaks=seq(1970,2020,1))
chinstrap_counts <- penguin_obs %>%
dplyr::filter(species_id != "EMPE") %>%
left_join(sites, by = "site_id")
hist(chinstrap_counts$season[chinstrap_counts$season>1969],breaks=seq(1970,2020,1))
500000*75
375/2
187*0.8
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
0.167*12
1/12
3.6/12
2.4/12
1/52
100000/600
166.67/60
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
0.167*12
500*365*40
