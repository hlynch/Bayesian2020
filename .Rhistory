quantile(APBSE_sums,c(0.025,0.975))
APBSW_counts <- vector()
for (i in 1:nrow(APBSW))
{
if(!is.na(APBSW$`Best current estimate`[i])&(APBSW$`Best current estimate`[i]>0))
{
#    mu<-log(APBSW$`Best current estimate`[i])
#    sigma<-precision_scales[APBSW$`Best current estimate precision`[i]]
#    count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
count<-APBSW$`Best current estimate`[i]
sigma<-sigma_scales[APBSW$`Best current estimate precision`[i]]
count.w.error <- rtruncnorm(10000,0,Inf,count,sigma*count)
APBSW_counts <- rbind(APBSW_counts, count.w.error)
}
}
#### Summing each column of generated counts
APBSW_sums <- c()
for (i in 1:1000) {
APBSW_sums <- c(APBSW_sums,sum(APBSW_counts[,i]))
}
hist(APBSW_sums)
mean(APBSW_sums)
quantile(APBSW_sums,c(0.025,0.975))
APDPE_counts <- vector()
for (i in 1:nrow(APDPE))
{
if(!is.na(APDPE$`Best current estimate`[i])&(APDPE$`Best current estimate`[i]>0))
{
#    mu<-log(APDPE$`Best current estimate`[i])
#    sigma<-precision_scales[APDPE$`Best current estimate precision`[i]]
#    count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
count<-APDPE$`Best current estimate`[i]
sigma<-sigma_scales[APDPE$`Best current estimate precision`[i]]
count.w.error <- rtruncnorm(10000,0,Inf,count,sigma*count)
APDPE_counts <- rbind(APDPE_counts, count.w.error)
}
}
#### Summing each column of generated counts
APDPE_sums <- c()
for (i in 1:1000) {
APDPE_sums <- c(APDPE_sums,sum(APDPE_counts[,i]))
}
hist(APDPE_sums)
mean(APDPE_sums)
quantile(APDPE_sums,c(0.025,0.975))
APEI_counts <- vector()
for (i in 1:nrow(APEI))
{
if(!is.na(APEI$`Best current estimate`[i])&(APEI$`Best current estimate`[i]>0))
{
#    mu<-log(APEI$`Best current estimate`[i])
#    sigma<-precision_scales[APEI$`Best current estimate precision`[i]]
#    count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
count<-APEI$`Best current estimate`[i]
sigma<-sigma_scales[APEI$`Best current estimate precision`[i]]
count.w.error <- rtruncnorm(10000,0,Inf,count,sigma*count)
APEI_counts <- rbind(APEI_counts, count.w.error)
}
}
#### Summing each column of generated counts
APEI_sums <- c()
for (i in 1:1000) {
APEI_sums <- c(APEI_sums,sum(APEI_counts[,i]))
}
hist(APEI_sums)
mean(APEI_sums)
quantile(APEI_sums,c(0.025,0.975))
APW_counts <- vector()
for (i in 1:nrow(APW))
{
if(!is.na(APW$`Best current estimate`[i])&(APW$`Best current estimate`[i]>0))
{
#    mu<-log(APW$`Best current estimate`[i])
#    sigma<-precision_scales[APW$`Best current estimate precision`[i]]
#    count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
count<-APW$`Best current estimate`[i]
sigma<-sigma_scales[APW$`Best current estimate precision`[i]]
count.w.error <- rtruncnorm(10000,0,Inf,count,sigma*count)
APW_counts <- rbind(APW_counts, count.w.error)
}
}
#### Summing each column of generated counts
APW_sums <- c()
for (i in 1:1000) {
APW_sums <- c(APW_sums,sum(APW_counts[,i]))
}
hist(APW_sums)
mean(APW_sums)
quantile(APW_sums,c(0.025,0.975))
sigma_scales<-c(0.025,0.05,0.125,0.250,0.45)
count.old<-200
precision.old<-5
count.new<-300
precision.new<-5
count.old.w.error <- rtruncnorm(10000,0,Inf,count.old,sigma_scales[precision.old]*count.old)
count.new.w.error <- rtruncnorm(10000,0,Inf,count.new,sigma_scales[precision.new]*count.new)
diff<-count.new.w.error-count.old.w.error
hist(diff)
quantile(diff,c(0.05,0.125,0.5,0.875,0.95))
count.old<-46
precision.old<-1
count.new<-27
precision.new<-3
#mu.old<-log(count.old)
#sigma.old<-precision_scales[precision.old]
#count.old.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.old.w.error <- rtruncnorm(10000,0,Inf,count.old,sigma_scales[precision.old]*count.old)
#mu.new<-log(count.new)
#sigma.new<-precision_scales[precision.new]
#count.new.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.new.w.error <- rtruncnorm(10000,0,Inf,count.new,sigma_scales[precision.new]*count.new)
diff<-count.new.w.error-count.old.w.error
hist(diff)
quantile(diff,c(0.05,0.125,0.5,0.875,0.95))
count.old<-150
precision.old<-3
count.new<-70
precision.new<-2
#mu.old<-log(count.old)
#sigma.old<-precision_scales[precision.old]
#count.old.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.old.w.error <- rtruncnorm(10000,0,Inf,count.old,sigma_scales[precision.old]*count.old)
#mu.new<-log(count.new)
#sigma.new<-precision_scales[precision.new]
#count.new.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.new.w.error <- rtruncnorm(10000,0,Inf,count.new,sigma_scales[precision.new]*count.new)
diff<-count.new.w.error-count.old.w.error
hist(diff)
quantile(diff,c(0.05,0.125,0.5,0.875,0.95))
count.old<-359
precision.old<-1
count.new<-246
precision.new<-3
#mu.old<-log(count.old)
#sigma.old<-precision_scales[precision.old]
#count.old.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.old.w.error <- rtruncnorm(10000,0,Inf,count.old,sigma_scales[precision.old]*count.old)
#mu.new<-log(count.new)
#sigma.new<-precision_scales[precision.new]
#count.new.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.new.w.error <- rtruncnorm(10000,0,Inf,count.new,sigma_scales[precision.new]*count.new)
diff<-count.new.w.error-count.old.w.error
hist(diff)
quantile(diff,c(0.05,0.125,0.5,0.875,0.95))
count.old<-2039
precision.old<-1
count.new<-833
precision.new<-3
#mu.old<-log(count.old)
#sigma.old<-precision_scales[precision.old]
#count.old.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.old.w.error <- rtruncnorm(10000,0,Inf,count.old,sigma_scales[precision.old]*count.old)
#mu.new<-log(count.new)
#sigma.new<-precision_scales[precision.new]
#count.new.w.error <- rlnorm(10000,mu-((sigma^2)/2), sigma)
count.new.w.error <- rtruncnorm(10000,0,Inf,count.new,sigma_scales[precision.new]*count.new)
diff<-count.new.w.error-count.old.w.error
hist(diff)
quantile(diff,c(0.05,0.125,0.5,0.875,0.95))
library(readr)
Gentoo_Table2 <- read_csv("~/Desktop/Gentoo_Table2.csv")
View(Gentoo_Table2)
gentoo_counts_fixed<-Gentoo_Table2
gentoo_counts_fixed[is.na(gentoo_counts_fixed$Abundance),]$Abundance<-0  #setting sites with unknown counts to zero for purposes of summing
S.Ork.Islands <- subset(gentoo_counts_fixed, Notes == "South Orkney Islands")
SG <- subset(gentoo_counts_fixed, Notes == "South Georgia")
S.Sandwich <- subset(gentoo_counts_fixed, Notes == "South Sandwich Islands")
FI <- subset(gentoo_counts_fixed, Notes == "Falkland Islands")
WAP <- subset(gentoo_counts_fixed, Notes == "AP")
sec_48.1 <- subset(gentoo_counts_fixed, CCAMLR == "48.1")
sigma_scales<-c(0.025,0.05,0.125,0.250,0.45)  #####Fixed the typo here, it was a typo in the script I sent you
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
for (i in 1:1000) {
Atlantic_sums <- c(Atlantic_sums,sum(Atlantic_counts[,i]))
}
mean(Atlantic_sums)
hist(Atlantic_sums)
quantile(Atlantic_sums,c(0.025,0.975))
dim(all_counts)
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
head(Atlantic_counts)
head(Atlantic_indices)
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
for (i in 1:1000) {
Atlantic_sums <- c(Atlantic_sums,sum(Atlantic_counts[,i]))
}
dim(Atlantic_sums)
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
dim(Atlantic_counts)
i=1
sum(Atlantic_counts[,i])
Atlantic_counts[,i]
all_counts[1:5,1:10]
Atlantic_counts[1:5,1:10]
sum(Atlantic_counts[,1])
Atlantic_counts[,1]
i=6
gentoo_counts_fixed$Abundance[i]
gentoo_counts_fixed<-Gentoo_Table2
S.Ork.Islands <- subset(gentoo_counts_fixed, Notes == "South Orkney Islands")
SG <- subset(gentoo_counts_fixed, Notes == "South Georgia")
S.Sandwich <- subset(gentoo_counts_fixed, Notes == "South Sandwich Islands")
FI <- subset(gentoo_counts_fixed, Notes == "Falkland Islands")
WAP <- subset(gentoo_counts_fixed, Notes == "AP")
sec_48.1 <- subset(gentoo_counts_fixed, CCAMLR == "48.1")
sigma_scales<-c(0.025,0.05,0.125,0.250,0.45)  #####Fixed the typo here, it was a typo in the script I sent you
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
for (i in 1:1000) {
Atlantic_sums <- c(Atlantic_sums,sum(Atlantic_counts[,i]))
}
dim(all_counts)
Atlantic_indices <- which(gentoo_counts_fixed$Sector == "Atlantic")
Atlantic_sums<-c()
Atlantic_counts<-all_counts[Atlantic_indices,]
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
dim(all_counts)
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts_log <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-log(gentoo_counts_fixed$Abundance[i])
sigma<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
all_counts_log <- rbind(all_counts_log, count.w.error)
}
}
#### Summing each column of generated counts
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts_log[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
dim(Atlantic)
Atlantic <- subset(gentoo_counts_fixed, Sector == "Atlantic")
dim(Atlantic)
dim(gentoo_counts_fixed)
sec_48.1_indices <- which(gentoo_counts_fixed$CCAMLR == "48.1")
sec_48.1_sums <- c()
sec_48.1_counts<-all_counts[sec_48.1_indices,]
for (i in 1:1000) {
sec_48.1_sums <- c(sec_48.1_sums,sum(sec_48.1_counts[,i]))
}
hist(sec_48.1_sums)
mean(sec_48.1_sums)
quantile(sec_48.1_sums,c(0.025,0.975))
all_counts <- vector()
for (i in 1:nrow(sec_48.1)) {
if(!is.na(sec_48.1$Abundance[i])&(sec_48.1$Abundance[i]>0))
{
mu<-sec_48.1$Abundance[i]
sig<-precision_scales[sec_48.1$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts_log <- vector()
for (i in 1:nrow(sec_48.1)) {
if(!is.na(sec_48.1$Abundance[i])&(sec_48.1$Abundance[i]>0))
{
mu<-log(sec_48.1$Abundance[i])
sigma<-precision_scales[sec_48.1$Penalty[i]]
count.w.error <- rlnorm(1000,mu-((sigma^2)/2), sigma)
all_counts_log <- rbind(all_counts_log, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts_log[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
all_counts <- vector()
for (i in 1:nrow(gentoo_counts_fixed)) {
if(!is.na(gentoo_counts_fixed$Abundance[i])&(gentoo_counts_fixed$Abundance[i]>0))
{
mu<-gentoo_counts_fixed$Abundance[i]
sig<-precision_scales[gentoo_counts_fixed$Penalty[i]]
count.w.error<-rtruncnorm(n=1000,0,Inf,mu,sig*mu)  #######uncertainty needs to be precision *times* the count with the Gaussian
all_counts <- rbind(all_counts, count.w.error)
}
}
everything_sums <- c()
for (i in 1:1000) {
everything_sums <- c(everything_sums,sum(all_counts[,i]))
}
hist(everything_sums)
mean(everything_sums)
quantile(everything_sums,c(0.025,0.975))
0.042*3
0.021*3
0.042+0.021+0.2+1+0.5
1.763*3
0.342*3
0.121*3
0.342+0.121+0.5+0.2+1.0+0.50
0.342+0.121+0.3+0.2+1.0+0.50
0.342+0.121+0.2+0.2+1.0+0.50
2.663+2.463+2.363
0.042+0.021+0.2+1+1
2.263*3
0.3+0.1+0.5
0.342+0.121+0.5+0.2+1+1
0.342+0.121+0.3+0.2+1+1
0.342+0.121+0.2+0.2+1+1
3.163+2.963+2.863
1/6
1.25/6.5
1/6.5
12/5
0.342*6.5
0.3*12
0.2*12
12-2.4
4.28*3
4.28*3
18+12+12+12
6.5+6.5+36
0.5+0.25+2.4+12+12
2.22+1+6+2.4+24
4.28+5.25+6
2.22+1+3.6+2.4+24
4.28+5.25+8.4
2.22+1+2.4+2.4+24
4.28+5.25+9.6
1.5+0.75+7.2+36+36
6.66+3+12+7.2+36+36
12.84+15.75+24
27.15+35.62
27.15+35.62+15.53
7220*0.14
5694*0.14
55000*0.25
28000*0.16
40000/26
1538*0.65
load("/Users/hjlynch/Downloads/wesegrid.RData")
View(wesedf)
12*11*2895
4195*10*12
12*21*2895
729540-503400
2000000/15
1/26
1/4
1/6
0.5/12
(2/3)*160
sqrt(30^2+11^2)
library(readr)
points <- read_csv("~/Dropbox/NASA SmallSat/points.csv")
View(points)
install.packages("spatstat")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
install.packages("deldir")
library("splancs", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(readr)
points <- read_csv("~/Dropbox/NASA SmallSat/points.csv")
View(points)
seals<-as.points(points)
seals
poly<-bboxx(seals)
poly
khat(seals,poly,seq(0,500,2))
plot(seq(0,500,2),khat(seals,poly,seq(0,500,2)))
seals.khat<-Kenv.csr(length(seals$x),poly,nsim=30,seq(0,500,2))
seals$x
seals
seals.khat<-Kenv.csr(length(seals$arx),poly,nsim=30,seq(0,500,2))
dim(seals)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,500,2))
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l")
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="")
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="",ylim=c(-200,200))
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
plot(seq(0,500,2),sqrt(khat(seals,poly,seq(0,500,2))/pi)-seq(0,500,2),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,500,2),sqrt(seals.khat$lower/pi)-seq(0,500,2),lty=2)
lines(seq(0,500,2),sqrt(seals.khat$upper/pi)-seq(0,500,2),lty=2)
boxplot(nndistG(seals$dists))
boxplot(nndistG(as.points(seals)$dists))
boxplot(nndistG(seals))
hist(nndistG(seals)$dists)
hist(nndistG(seals)$dists,breaks=30,col="green")
hist(nndistG(seals)$dists,breaks=30,col="lightgreen")
hist(nndistG(seals)$dists,breaks=20,col="lightgreen")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
library(readr)
seal_sizes <- read_csv("~/Dropbox/NASA SmallSat/seal_sizes.csv")
View(seal_sizes)
hist(seal_sizes)
hist(seal_sizes$x)
hist(seal_sizes$size)
hist(seal_sizes$size,col="lightblue")
mean(seal_sizes)
mean(seal_sizes$size)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,500,2))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-200,50))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-20,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.1),sqrt(seals.khat$lower/pi)-seq(0,2,0.1),lty=2)
lines(seq(0,2,0.1),sqrt(seals.khat$upper/pi)-seq(0,2,0.1),lty=2)
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,2,0.01))
plot(seq(0,2,0.01),sqrt(khat(seals,poly,seq(0,2,0.01))/pi)-seq(0,2,0.01),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,2,0.01),sqrt(seals.khat$lower/pi)-seq(0,2,0.01),lty=2)
lines(seq(0,2,0.01),sqrt(seals.khat$upper/pi)-seq(0,2,0.01),lty=2)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=30,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
seals<-as.points(points/29.89814)
seals.khat<-Kenv.csr(length(seals[,1]),poly,nsim=100,seq(0,20,0.1))
poly<-bboxx(seals)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,5))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
lines(seq(0,20,0.1),sqrt(seals.khat$lower/pi)-seq(0,20,0.1),lty=2)
lines(seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1),lty=2)
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),sqrt(seals.khat$upper/pi)-seq(0,20,0.1)))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))))
plot(seq(0,20,0.1),sqrt(khat(seals,poly,seq(0,20,0.1))/pi)-seq(0,20,0.1),typ="l",ylab="",ylim=c(-10,10))
polygon(x=c(seq(0,20,0.1),rev(seq(0,20,0.1))),y=c(sqrt(seals.khat$lower/pi)-seq(0,20,0.1),rev(sqrt(seals.khat$upper/pi)-seq(0,20,0.1))),typ="l")
hist(nndistG(seals)$dists,breaks=10,col="lightgreen")
hist(seal_sizes$size,col="lightblue")
hist(seal_sizes$size,col="lightblue",breaks-20)
hist(seal_sizes$size,col="lightblue",breaks=20)
hist(seal_sizes$size,col="lightblue",breaks=15)
hist(seal_sizes$size,col="lightblue",breaks=12)
hist(seal_sizes$size,col="lightblue",breaks=11)
hist(seal_sizes$size,col="lightblue",breaks=10)
exp(0.1^2)
0.1^2
32120*0.595
45520*0.595
48520*0.595
setwd("~/Documents/Projects/Bayesian2020")
bookdown::render_book("index.Rmd")
